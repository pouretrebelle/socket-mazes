!function(Q){var t={};function B(F){if(t[F])return t[F].exports;var U=t[F]={i:F,l:!1,exports:{}};return Q[F].call(U.exports,U,U.exports,B),U.l=!0,U.exports}B.m=Q,B.c=t,B.d=function(Q,t,F){B.o(Q,t)||Object.defineProperty(Q,t,{enumerable:!0,get:F})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,t){if(1&t&&(Q=B(Q)),8&t)return Q;if(4&t&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(B.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&t&&"string"!=typeof Q)for(var U in Q)B.d(F,U,function(t){return Q[t]}.bind(null,U));return F},B.n=function(Q){var t=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(t,"a",t),t},B.o=function(Q,t){return Object.prototype.hasOwnProperty.call(Q,t)},B.p="/",B(B.s=6)}([function(module,exports,__webpack_require__){eval("\nvar content = __webpack_require__(1);\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(3)(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3N0eWxlLnNhc3M/ZjFiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLENBQW1KOztBQUV6Syw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsQ0FBbUQ7O0FBRXhFOztBQUVBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNhc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zYXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNhc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(2)(false);\n// imports\n\n\n// module\nexports.push([module.i, "body {\\n  margin: 0;\\n  color: #000;\\n  overflow: hidden; }\\n", ""]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L3N0eWxlLnNhc3M/YzJlNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUErQztBQUNsRjs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsU0FBUyxjQUFjLGdCQUFnQixxQkFBcUIsRUFBRTs7QUFFckYiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBjb2xvcjogIzAwMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn "@media " + item[2] + "{" + content + "}";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join("");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === "string")\n\t\t\tmodules = [[null, modules, ""]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === "number")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || \'\';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === \'function\') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn \'/*# sourceURL=\' + cssMapping.sourceRoot + source + \' */\'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n\t}\n\n\treturn [content].join(\'\\n\');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = \'sourceMappingURL=data:application/json;charset=utf-8;base64,\' + base64;\n\n\treturn \'/*# \' + data + \' */\';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === "undefined") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve "head" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }\n                // }\n                if (typeof target === \'function\') {\n                        return target();\n                }\n                if (typeof memo[target] === "undefined") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(4);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== "undefined" && DEBUG) {\n\t\tif (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === "object" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = "head";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = "bottom";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error("Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === "top") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === "bottom") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === "object" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error("[Style Loader]\\n\\n Invalid value for parameter \'insertAt\' (\'options.insertAt\') found.\\n Must be \'top\', \'bottom\', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement("style");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement("link");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\toptions.attrs.rel = "stylesheet";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === \'function\'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don\'t add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === "function" &&\n\t\ttypeof URL.createObjectURL === "function" &&\n\t\ttypeof URL.revokeObjectURL === "function" &&\n\t\ttypeof Blob === "function" &&\n\t\ttypeof btoa === "function"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join(\'\\n\');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? "" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute("media", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn\'t defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\n\t}\n\n\tvar blob = new Blob([css], { type: "text/css" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')},function(module,exports){eval('\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function "fixes" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== "undefined" && window.location;\n\n  if (!location) {\n    throw new Error("fixUrls requires window.location");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== "string") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + "//" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, "/");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word "url" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn\'t a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn\'t a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn\'t a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^"(.*)"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^\'(.*)\'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf("//") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf("/") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with \'/\'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, ""); // Strip leading \'./\'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn "url(" + JSON.stringify(newUrl) + ")";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "favicon.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50L2Fzc2V0cy9mYXZpY29uLnBuZz9jMzJlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZhdmljb24ucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./src/client/style.sass\nvar style = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./src/client/assets/favicon.png\nvar favicon = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/shared/Maze/MazeUnit.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MazeUnit =\n/*#__PURE__*/\nfunction () {\n  function MazeUnit(x, y, maze) {\n    _classCallCheck(this, MazeUnit);\n\n    this.x = x;\n    this.y = y;\n    this.maze = maze; // establish neighbours\n\n    this.neighbours = [];\n    this.edges = [];\n    this.active = false;\n  }\n\n  _createClass(MazeUnit, [{\n    key: "initialiseNeighbours",\n    value: function initialiseNeighbours(x, y) {\n      // initialise neighbours called after all hexagons are constructed\n      // because otherwise the hexagons array isn\'t full yet\n      // lots of conditionals to allow for edge hexagons\n      // start with array of falses for neighbours\n      // and empty for edges\n      var e = [false, false, false, false];\n      var n = [false, false, false, false]; // north\n\n      if (y > 0) {\n        n[0] = this.maze.units[x][y - 1];\n        e[0] = this.maze.edges[x * 2][y];\n      } // east\n\n\n      if (x < this.maze.unitsX - 1) {\n        n[1] = this.maze.units[x + 1][y];\n        e[1] = this.maze.edges[x * 2 + 3][y];\n      } // south\n\n\n      if (y < this.maze.unitsY - 1) {\n        n[2] = this.maze.units[x][y + 1];\n        e[2] = this.maze.edges[x * 2][y + 1];\n      } // west\n\n\n      if (x > 0) {\n        n[3] = this.maze.units[x - 1][y];\n        e[3] = this.maze.edges[x * 2 + 1][y];\n      }\n\n      this.neighbours = n;\n      this.edges = e;\n    }\n  }, {\n    key: "update",\n    value: function update() {}\n  }, {\n    key: "draw",\n    value: function draw(c) {}\n  }, {\n    key: "checkCorner",\n    value: function checkCorner(c, one, two, corner) {\n      if ((this.edges[one] === false || this.edges[one].canDraw()) && (this.edges[two] === false || this.edges[two].canDraw())) {\n        this.drawCorner(c, corner);\n      }\n    }\n  }, {\n    key: "drawCorner",\n    value: function drawCorner(c, corner) {\n      var x = this.x * this.maze.size;\n      var y = this.y * this.maze.size;\n\n      if (corner == 0 || corner == 3) {\n        x += this.maze.size - (this.maze.wallBorderRadius - this.maze.wallWidth * 0.5);\n      } else {\n        x += this.maze.wallBorderRadius - this.maze.wallWidth * 0.5;\n      }\n\n      if (corner == 1 || corner == 0) {\n        y += this.maze.size - (this.maze.wallBorderRadius - this.maze.wallWidth * 0.5);\n      } else {\n        y += this.maze.wallBorderRadius - this.maze.wallWidth * 0.5;\n      }\n\n      outlineArc(c, x, y, corner, this.maze.wallBorderRadius, this.maze.wallBorderRadius - this.maze.wallWidth);\n    }\n  }, {\n    key: "activate",\n    value: function activate() {\n      this.active = true;\n    }\n  }, {\n    key: "countWalls",\n    value: function countWalls() {\n      var count = 0;\n\n      for (var i = 0; i < 4; i++) {\n        if (this.edges[i].active || this.edges[i] === false) count++;\n      }\n\n      return count;\n    }\n  }, {\n    key: "countInactiveNeighbours",\n    value: function countInactiveNeighbours() {\n      // returns number of inactive neighbours\n      var inactiveNeighbours = 0;\n\n      for (var i = 0; i < 4; i++) {\n        if (this.neighbours[i] && !this.neighbours[i].active) {\n          inactiveNeighbours++;\n        }\n      }\n\n      return inactiveNeighbours;\n    }\n  }, {\n    key: "getInactiveNeighbours",\n    value: function getInactiveNeighbours() {\n      // returns array of booleans for inactive neighbours\n      var inactiveNeighbours = [];\n\n      for (var i = 0; i < 4; i++) {\n        // if neighbour exists and is inactive\n        if (this.neighbours[i] && !this.neighbours[i].active) {\n          inactiveNeighbours.push(true);\n        } else {\n          inactiveNeighbours.push(false);\n        }\n      }\n\n      return inactiveNeighbours;\n    }\n  }, {\n    key: "getRandomInactiveNeighbour",\n    value: function getRandomInactiveNeighbour() {\n      var count = this.countInactiveNeighbours();\n      if (count == 0) return false;\n      var choice = Math.floor(Math.random() * count);\n      var inactives = this.getInactiveNeighbours();\n      var through = 0;\n\n      for (var i = 0; i < 4; i++) {\n        if (inactives[i]) {\n          if (through == choice) {\n            return i;\n          }\n\n          through++;\n        }\n      }\n    }\n  }, {\n    key: "getActiveNeighbour",\n    value: function getActiveNeighbour() {\n      for (var i = 0; i < 4; i++) {\n        if (this.neighbours[i].active) {\n          return i;\n        }\n      }\n    }\n  }, {\n    key: "getEdge",\n    value: function getEdge(neighbour) {\n      if (!neighbour) return false;\n      var diffX = this.x - neighbour.x;\n      var diffY = this.y - neighbour.y;\n\n      if (diffX == 1) {\n        return this.edges[3];\n      } else if (diffX == -1) {\n        return this.edges[1];\n      } else if (diffY == 1) {\n        return this.edges[2];\n      } else if (diffY == -1) {\n        return this.edges[0];\n      }\n\n      return false;\n    }\n  }]);\n\n  return MazeUnit;\n}();\n\n/* harmony default export */ var Maze_MazeUnit = (MazeUnit);\n// CONCATENATED MODULE: ./src/shared/Maze/utils.js\nvar roundedRect = function roundedRect(c, x, y, width, height, radius) {\n  c.beginPath();\n  c.moveTo(x, y + radius);\n  c.lineTo(x, y + height - radius);\n  c.arcTo(x, y + height, x + radius, y + height, radius);\n  c.lineTo(x + width - radius, y + height);\n  c.arcTo(x + width, y + height, x + width, y + height - radius, radius);\n  c.lineTo(x + width, y + radius);\n  c.arcTo(x + width, y, x + width - radius, y, radius);\n  c.lineTo(x + radius, y);\n  c.arcTo(x, y, x, y + radius, radius);\n  c.fill();\n};\nvar utils_outlineArc = function outlineArc(c, x, y, outerRadius, innerRadius, angle) {\n  c.save();\n  c.translate(x, y);\n  c.rotate(angle);\n  c.beginPath();\n  c.moveTo(innerRadius, 0);\n  c.arcTo(innerRadius, innerRadius, 0, innerRadius, innerRadius);\n  c.lineTo(0, outerRadius);\n  c.arcTo(outerRadius, outerRadius, outerRadius, 0, outerRadius);\n  c.fill();\n  c.restore();\n};\n// CONCATENATED MODULE: ./src/shared/Maze/MazeEdge.js\nfunction MazeEdge_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction MazeEdge_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MazeEdge_createClass(Constructor, protoProps, staticProps) { if (protoProps) MazeEdge_defineProperties(Constructor.prototype, protoProps); if (staticProps) MazeEdge_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar MazeEdge_MazeEdge =\n/*#__PURE__*/\nfunction () {\n  function MazeEdge(x, y, maze) {\n    MazeEdge_classCallCheck(this, MazeEdge);\n\n    this.maze = maze;\n    this.vert = false;\n    if (x % 2 == 1) this.vert = true;\n    this.x = Math.floor(x / 2);\n    this.y = y;\n    this.active = true;\n    this.disabled = false; // for path drawing\n\n    this.middle = {\n      x: this.vert ? this.x : this.x + 0.5,\n      y: this.vert ? this.y + 0.5 : this.y\n    }; // bottom\n\n    if (this.vert && this.y == this.maze.unitsY) this.disabled = true; // right\n\n    if (!this.vert && this.x == this.maze.unitsX) this.disabled = true; // entrance\n\n    if (this.vert && this.x == 0 && this.y == this.maze.entranceY) this.active = false; // exit\n\n    if (this.vert && this.x == this.maze.unitsX && this.y == this.maze.exitY) this.active = false;\n  }\n\n  MazeEdge_createClass(MazeEdge, [{\n    key: "deactivate",\n    value: function deactivate() {\n      this.active = false;\n    }\n  }, {\n    key: "cantDraw",\n    value: function cantDraw() {\n      return !this.active || this.disabled;\n    }\n  }, {\n    key: "canDraw",\n    value: function canDraw() {\n      return this.active && !this.disabled;\n    }\n  }, {\n    key: "checkRelativeEdge",\n    value: function checkRelativeEdge(x, y) {\n      var targetX = this.vert ? this.x * 2 + 1 + x : this.x * 2 + x;\n      var targetY = this.y + y;\n      var curve = false;\n\n      if (this.maze.edges[targetX] && this.maze.edges[targetX][targetY] && this.maze.edges[targetX][targetY].canDraw()) {\n        curve = true;\n      }\n\n      return curve;\n    }\n  }, {\n    key: "draw",\n    value: function draw(c) {\n      if (this.cantDraw()) return;\n      var m = this.maze;\n      c.fillStyle = m.wallColor;\n      c.save();\n      c.translate(this.x * m.size, this.y * m.size);\n\n      if (this.vert) {\n        c.rotate(Math.PI * 0.5);\n      } // main wall\n\n\n      c.fillRect(m.wallBorderRadius - m.wallWidth * 0.5, -m.wallWidth * 0.5, m.size - m.wallBorderRadius * 2 + m.wallWidth, m.wallWidth);\n      var curveStartLeft = this.vert ? this.checkRelativeEdge(-3, 0) : this.checkRelativeEdge(1, 0);\n      var curveEndLeft = this.vert ? this.checkRelativeEdge(-1, 1) : this.checkRelativeEdge(3, -1);\n      var curveStartRight = this.vert ? this.checkRelativeEdge(-1, 0) : this.checkRelativeEdge(1, -1);\n      var curveEndRight = this.vert ? this.checkRelativeEdge(-3, 1) : this.checkRelativeEdge(3, 0);\n      if (curveStartLeft && curveStartRight) this.drawCurveWithT(c);else if (curveStartLeft) this.drawCurve(c);else if (!curveStartRight) this.drawCap(c);\n      c.translate(m.size, 0);\n      c.rotate(Math.PI);\n      if (curveEndLeft && curveEndRight) this.drawCurveWithT(c);else if (curveEndLeft) this.drawCurve(c);else if (!curveEndRight) this.drawCap(c);\n      c.restore();\n    }\n  }, {\n    key: "drawCurve",\n    value: function drawCurve(c) {\n      utils_outlineArc(c, this.maze.wallBorderRadius - this.maze.wallWidth * 0.5, this.maze.wallBorderRadius - this.maze.wallWidth * 0.5, this.maze.wallBorderRadius, this.maze.wallBorderRadius - this.maze.wallWidth, Math.PI);\n    }\n  }, {\n    key: "drawCurveWithT",\n    value: function drawCurveWithT(c) {\n      this.drawCurve(c);\n      c.beginPath();\n      c.moveTo(-this.maze.wallWidth * 0.5, this.maze.wallBorderRadius);\n      c.arcTo(-this.maze.wallWidth * 0.5, 0, this.maze.wallBorderRadius - this.maze.wallWidth * 0.5, 0, this.maze.wallBorderRadius);\n      c.arcTo(-this.maze.wallWidth * 0.5, 0, -this.maze.wallWidth * 0.5, -this.maze.wallBorderRadius, this.maze.wallBorderRadius);\n      c.lineTo(-this.maze.wallWidth * 0.5, -this.maze.wallBorderRadius);\n      c.fill();\n    }\n  }, {\n    key: "drawCap",\n    value: function drawCap(c) {\n      var m = this.maze;\n      c.beginPath();\n      c.moveTo(m.wallBorderRadius - m.wallWidth * 0.5, -m.wallWidth * 0.5);\n      c.lineTo(m.wallBorderRadius - m.wallWidth * 0.5, m.wallWidth * 0.5);\n      c.lineTo(0, m.wallWidth * 0.5);\n      c.arcTo(-m.wallWidth * 0.5, m.wallWidth * 0.5, -m.wallWidth * 0.5, 0, m.wallWidth * 0.5);\n      c.arcTo(-m.wallWidth * 0.5, -m.wallWidth * 0.5, 0, -m.wallWidth * 0.5, m.wallWidth * 0.5);\n      c.fill();\n    }\n  }]);\n\n  return MazeEdge;\n}();\n\n/* harmony default export */ var Maze_MazeEdge = (MazeEdge_MazeEdge);\n// CONCATENATED MODULE: ./src/shared/Maze/MazePathSegment.js\nfunction MazePathSegment_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction MazePathSegment_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MazePathSegment_createClass(Constructor, protoProps, staticProps) { if (protoProps) MazePathSegment_defineProperties(Constructor.prototype, protoProps); if (staticProps) MazePathSegment_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar MazePathSegment =\n/*#__PURE__*/\nfunction () {\n  function MazePathSegment(_ref) {\n    var startUnit = _ref.startUnit,\n        startEdge = _ref.startEdge,\n        endUnit = _ref.endUnit,\n        endEdge = _ref.endEdge,\n        color = _ref.color,\n        maze = _ref.maze;\n\n    MazePathSegment_classCallCheck(this, MazePathSegment);\n\n    this.maze = maze;\n    this.startUnit = startUnit;\n    this.startEdge = startEdge;\n    this.endUnit = endUnit;\n    this.endEdge = endEdge;\n    this.color = color;\n  }\n\n  MazePathSegment_createClass(MazePathSegment, [{\n    key: "draw",\n    value: function draw(c, pathWidth) {\n      var m = this.maze;\n      c.strokeStyle = this.color;\n      c.beginPath();\n      c.moveTo(this.startEdge.middle.x * m.size, this.startEdge.middle.y * m.size);\n      c.quadraticCurveTo((this.startUnit.x + 0.5) * m.size, (this.startUnit.y + 0.5) * m.size, this.endEdge.middle.x * m.size, this.endEdge.middle.y * m.size);\n      c.stroke();\n    }\n  }]);\n\n  return MazePathSegment;\n}();\n\n/* harmony default export */ var Maze_MazePathSegment = (MazePathSegment);\n// CONCATENATED MODULE: ./src/shared/Maze/MazePath.js\nfunction MazePath_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction MazePath_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction MazePath_createClass(Constructor, protoProps, staticProps) { if (protoProps) MazePath_defineProperties(Constructor.prototype, protoProps); if (staticProps) MazePath_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar MazePath_MazePath =\n/*#__PURE__*/\nfunction () {\n  function MazePath(maze) {\n    MazePath_classCallCheck(this, MazePath);\n\n    this.maze = maze;\n    this.complete = false;\n    this.pathColor = \'#df7f26\';\n    this.originalPathColor = this.pathColor;\n    this.segments = [];\n    console.log(this.maze.units[0][0]);\n  }\n\n  MazePath_createClass(MazePath, [{\n    key: "addToPath",\n    value: function addToPath(_ref) {\n      var unit = _ref.unit,\n          edge = _ref.edge,\n          _ref$color = _ref.color,\n          color = _ref$color === void 0 ? this.pathColor : _ref$color;\n      this.active = false;\n      var last = this.last();\n      var segment = new Maze_MazePathSegment({\n        startUnit: last.endUnit,\n        startEdge: last.endEdge,\n        endUnit: unit,\n        endEdge: edge,\n        color: color,\n        maze: this.maze\n      });\n      this.segments.push(segment); // if it\'s the first addition, change the path color\n\n      if (this.segments.length == 2) {\n        this.pathColor = this.segments[1].color;\n      }\n    }\n  }, {\n    key: "last",\n    value: function last() {\n      // if there are segments\n      if (this.segments.length > 0) {\n        // return the \'end\' of the last one\n        return this.segments[this.segments.length - 1];\n      } // otherwise return the entrance and fake start edge\n\n\n      return {\n        endUnit: this.maze.units[0][this.maze.entranceY],\n        endEdge: {\n          middle: {\n            x: 0,\n            y: this.maze.entranceY + 0.5\n          }\n        }\n      };\n    }\n  }, {\n    key: "travel",\n    value: function travel(direction, color) {\n      // don\'t move if the path is complete\n      if (this.complete) return; // get the end of the line\n\n      var current = this.last().endUnit;\n      var hitJunction = false; // move until you hit a wall\n\n      while (current.neighbours[direction] && !current.edges[direction].active && !hitJunction) {\n        current = current.neighbours[direction]; // if the new unit has fewer than 2 edges then you\'ve hit a junction and should stop moving\n\n        if (current.countWalls() != 2) {\n          hitJunction = true;\n        } // stop if the new unit is at the cusp of the exit\n\n\n        if (current.x == this.maze.unitsX - 1 && current.y == this.maze.exitY) {\n          hitJunction = true;\n        }\n      } // if it has moved, add it to the path\n\n\n      if (current != this.last().endUnit) {\n        this.addToPath({\n          unit: current,\n          edge: current.edges[(direction + 2) % 4],\n          // where we came from\n          color: color\n        });\n      } // if the current unit is the last one on the grid the maze is complete!\n\n\n      if (current.x == this.maze.unitsX - 1 && current.y == this.maze.exitY && direction == 1) {\n        this.complete = true; // add final path\n\n        this.addToPath({\n          unit: current,\n          edge: {\n            middle: {\n              x: current.x + 1,\n              y: current.y + 0.5\n            }\n          },\n          color: color\n        });\n      }\n\n      this.maze.draw();\n    }\n  }, {\n    key: "reset",\n    value: function reset() {\n      this.complete = false;\n      this.pathColor = this.originalPathColor;\n      this.segments = [];\n    }\n  }, {\n    key: "draw",\n    value: function draw(c) {\n      var m = this.maze;\n      var pathWidth = m.size * 0.15;\n      var pathHeadSize = m.size * 0.4;\n      c.fillStyle = this.pathColor;\n      c.strokeStyle = this.pathColor;\n      c.lineWidth = pathWidth; // draw end of path if it\'s finished\n\n      if (this.complete) {\n        // set the colour to the last segment\n        c.fillStyle = this.segments[this.segments.length - 1].color;\n        c.fillRect(m.unitsX * m.size, (0.5 + m.exitY) * m.size - pathWidth * 0.5, m.marginLeft * m.pixelRatio, pathWidth);\n      } // draw each segment of path\n\n\n      var segmentCount = this.segments.length;\n\n      for (var i = 0; i < this.segments.length; i++) {\n        var opacity = Math.max(0.2, 1 - i * 0.005); // fade out as you go\n\n        c.globalAlpha = opacity;\n        this.segments[segmentCount - 1 - i].draw(c, pathWidth);\n      } // draw start of path\n      // at same alpha as last drawn segment\n\n\n      c.fillRect(-m.marginLeft * m.pixelRatio, (0.5 + m.entranceY) * m.size - pathWidth * 0.5, m.marginLeft * m.pixelRatio, pathWidth); // reset alpha\n\n      c.globalAlpha = 1; // draw ball at the end of path\n\n      if (!this.complete) {\n        var last = this.last();\n        c.beginPath();\n        c.moveTo(last.endEdge.middle.x * m.size, last.endEdge.middle.y * m.size);\n        c.lineTo((last.endUnit.x + 0.5) * m.size, (last.endUnit.y + 0.5) * m.size);\n        c.stroke();\n        c.beginPath();\n        c.arc((last.endUnit.x + 0.5) * m.size, (last.endUnit.y + 0.5) * m.size, pathHeadSize * 0.5, 0, 2 * Math.PI);\n        c.fill();\n      }\n    }\n  }]);\n\n  return MazePath;\n}();\n\n/* harmony default export */ var Maze_MazePath = (MazePath_MazePath);\n// CONCATENATED MODULE: ./src/shared/Maze/index.js\nfunction Maze_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Maze_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Maze_createClass(Constructor, protoProps, staticProps) { if (protoProps) Maze_defineProperties(Constructor.prototype, protoProps); if (staticProps) Maze_defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\nvar Maze_Maze =\n/*#__PURE__*/\nfunction () {\n  function Maze(c) {\n    Maze_classCallCheck(this, Maze);\n\n    this.c = c;\n    this.pixelRatio = window && window.devicePixelRatio || 1; // the parts we can\'t change\n\n    this.unitsX = 30;\n    this.unitsY = 20; // positioning\n\n    this.width = 1000;\n    this.height = 700;\n    this.marginLeft = 50;\n    this.marginTop = 50; // pixel-ratio adjusted values\n\n    this.wallWidth = 4;\n    this.wallBorderRadius = 10;\n    this.wallColor = \'#000\';\n    this.backgroundColor = \'#fff\';\n    this.size = this.width / this.unitsX;\n    this.entranceY = Math.floor(Math.random() * this.unitsY);\n    this.exitY = Math.floor(Math.random() * this.unitsY); // initialise units and edges as arrays of arrays\n\n    this.units = Array.from({\n      length: this.unitsX + 1\n    }, function () {\n      return [];\n    });\n    this.edges = Array.from({\n      length: this.unitsX * 2 + 3\n    }, function () {\n      return [];\n    }); // make a load of walls\n\n    this.setupWalls(); // make a load of units that reference those walls\n\n    this.setupUnits(); // use algorithm to carve walls\n\n    this.huntAndKill(); // setup maze path\n\n    this.path = new Maze_MazePath(this);\n  }\n\n  Maze_createClass(Maze, [{\n    key: "updateDimensions",\n    value: function updateDimensions(_ref) {\n      var width = _ref.width,\n          height = _ref.height,\n          _ref$margin = _ref.margin,\n          margin = _ref$margin === void 0 ? 0 : _ref$margin;\n      this.width = width;\n      this.height = height;\n      this.c.canvas.width = width * this.pixelRatio;\n      this.c.canvas.style.width = "".concat(width, "px");\n      this.c.canvas.height = height * this.pixelRatio;\n      this.c.canvas.style.height = "".concat(height, "px");\n      var unitsRatio = this.unitsX / this.unitsY;\n      var verticalGap = (width - margin * 2) / (height - margin * 2) < unitsRatio;\n\n      if (verticalGap) {\n        this.marginLeft = margin;\n        this.marginTop = (height - (width - margin * 2) / unitsRatio) / 2;\n        this.size = (width - margin * 2) / this.unitsX * this.pixelRatio;\n      } else {\n        this.marginTop = margin;\n        this.marginLeft = (width - (height - margin * 2) * unitsRatio) / 2;\n        this.size = (height - margin * 2) / this.unitsY * this.pixelRatio;\n      }\n\n      this.wallWidth = this.size * 0.15;\n      this.wallBorderRadius = this.size * 0.35;\n    } // Carving methods\n    //===================================\n\n  }, {\n    key: "setupWalls",\n    value: function setupWalls() {\n      // initialise 2D array of edges\n      for (var x = 0; x <= this.unitsX * 2 + 1; x++) {\n        for (var y = 0; y <= this.unitsY; y++) {\n          this.edges[x].push(new Maze_MazeEdge(x, y, this));\n        }\n      }\n    }\n  }, {\n    key: "setupUnits",\n    value: function setupUnits() {\n      // initialise 2D array of units\n      for (var x = 0; x < this.unitsX; x++) {\n        for (var y = 0; y < this.unitsY; y++) {\n          this.units[x].push(new Maze_MazeUnit(x, y, this));\n        }\n      } // neighbouring needs to be done after they\'re all initialised\n\n\n      for (var _x = 0; _x < this.unitsX; _x++) {\n        for (var _y = 0; _y < this.unitsY; _y++) {\n          this.units[_x][_y].initialiseNeighbours(_x, _y);\n        }\n      }\n    }\n  }, {\n    key: "regenerate",\n    value: function regenerate() {\n      this.entranceY = Math.floor(Math.random() * this.unitsY);\n      this.exitY = Math.floor(Math.random() * this.unitsY);\n\n      for (var x = 0; x <= this.unitsX * 2 + 1; x++) {\n        for (var y = 0; y <= this.unitsY; y++) {\n          this.edges[x][y].active = true;\n        }\n      } // reset the exit and entrances\n\n\n      this.edges[1][this.entranceY].active = false;\n      this.edges[this.unitsX * 2 + 1][this.exitY].active = false;\n      this.huntAndKill();\n      this.path.reset();\n      this.draw();\n    } // Carving algorithms\n    //===================================\n\n  }, {\n    key: "huntAndKill",\n    value: function huntAndKill() {\n      var startUnit = this.units[Math.round(this.unitsX / 2)][Math.round(this.unitsY / 2)];\n\n      while (startUnit != false) {\n        this.kill(startUnit);\n        startUnit = this.hunt();\n      } // reset activity of units\n\n\n      for (var x = 0; x < this.unitsX; x++) {\n        for (var y = 0; y < this.unitsY; y++) {\n          this.units[x][y].active = false;\n        }\n      }\n    }\n  }, {\n    key: "kill",\n    value: function kill(tile) {\n      var curUnit = tile;\n      curUnit.activate(); // remove an active edge\n\n      var prev = curUnit.getActiveNeighbour();\n      var prevEdge = curUnit.edges[prev];\n      if (prevEdge) prevEdge.deactivate(); // find a next tile\n\n      var next = curUnit.getRandomInactiveNeighbour();\n      var nextUni = curUnit.neighbours[next];\n\n      while (nextUni != undefined) {\n        nextUni.activate();\n        curUnit.edges[next].deactivate();\n        curUnit = nextUni;\n        next = curUnit.getRandomInactiveNeighbour();\n        nextUni = curUnit.neighbours[next];\n      }\n    }\n  }, {\n    key: "hunt",\n    value: function hunt() {\n      for (var x = 0; x < this.unitsX; x++) {\n        for (var y = 0; y < this.unitsY; y++) {\n          var unit = this.units[x][y];\n          var maxNeighbours = 4;\n          if (x == 0 || x == this.unitsX - 1) maxNeighbours--;\n          if (y == 0 || y == this.unitsY - 1) maxNeighbours--;\n\n          if (!unit.active && unit.countInactiveNeighbours() < maxNeighbours) {\n            return unit;\n          }\n        }\n      }\n\n      return false;\n    } // Drawing methods\n    //===================================\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var c = this.c;\n      c.fillStyle = this.backgroundColor;\n      c.fillRect(0, 0, this.width * this.pixelRatio, this.height * this.pixelRatio);\n      c.save();\n      c.translate(this.marginLeft * this.pixelRatio, this.marginTop * this.pixelRatio);\n\n      for (var x = 0; x <= this.unitsX * 2 + 1; x++) {\n        for (var y = 0; y <= this.unitsY; y++) {\n          this.edges[x][y].draw(c);\n        }\n      } // draw the path\n\n\n      this.path.draw(c);\n      c.restore();\n    }\n  }]);\n\n  return Maze;\n}();\n\n/* harmony default export */ var shared_Maze = (Maze_Maze);\n// CONCATENATED MODULE: ./src/client/game/index.js\n\nvar KEY_CODES = {\n  ARROW_UP: 38,\n  ARROW_RIGHT: 39,\n  ARROW_DOWN: 40,\n  ARROW_LEFT: 37,\n  SPACE: 32\n};\nvar canvas = document.createElement(\'canvas\');\nvar game_c = canvas.getContext(\'2d\');\nvar maze = new shared_Maze(game_c);\n\nvar updateMazeDimensions = function updateMazeDimensions() {\n  maze.updateDimensions({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    margin: 50\n  });\n  maze.draw();\n};\n\nupdateMazeDimensions();\nwindow.addEventListener(\'resize\', updateMazeDimensions);\nwindow.addEventListener(\'keydown\', function (e) {\n  switch (event.keyCode) {\n    case KEY_CODES.ARROW_UP:\n      maze.path.travel(0);\n      break;\n\n    case KEY_CODES.ARROW_RIGHT:\n      maze.path.travel(1);\n      break;\n\n    case KEY_CODES.ARROW_DOWN:\n      maze.path.travel(2);\n      break;\n\n    case KEY_CODES.ARROW_LEFT:\n      maze.path.travel(3);\n      break;\n\n    case KEY_CODES.SPACE:\n      maze.regenerate();\n      break;\n  }\n});\ndocument.body.append(canvas);\n// CONCATENATED MODULE: ./src/client/main.js\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')}]);